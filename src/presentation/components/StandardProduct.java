/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentation.components;

import java.awt.Image;
import java.awt.image.BufferedImage;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import models.Product;
import models.ProductSelection;
import util.FileHandler;
import util.Logging;

/**
 *
 * @author jonbr
 */
public class StandardProduct extends javax.swing.JPanel implements IProductSelector {
    Product product;
    IProductConsumer consumer;
    String dimensions;
    
    /**
     * Creates new form StandardProduct
     */
    public StandardProduct(Product product, IProductConsumer consumer) {
        initComponents();
        
        this.product = product;
        this.consumer = consumer;
        
        initCustom();
    }
    
    private void initCustom()
    {
        this.lblTitle.setText(product.getName());
        this.productDescription.setText(product.getDescription());
        updateImage(product.getImagePath());
        
        productUnits.setValue(1);
        productUnits.setEnabled(!product.getRequiresDimensions());
    }
    
    private void updateImage(String path)
    {
        if(path == null || path.isBlank())
        {
            this.showcaseLabel.setIcon(null);
            return;
        }

        BufferedImage image = FileHandler.LoadImage(path);

        int width = showcaseLabel.getWidth();
        int height = showcaseLabel.getHeight();
        
        // Default values shall be applied if width/height are set to 0
        if(width == 0 || height == 0)
        {
            width = 200;
            height = 200;
        }
        
        var scaledIcon = image.getScaledInstance(width, height, Image.SCALE_SMOOTH);
        
        showcaseLabel.setIcon(new ImageIcon(scaledIcon));
    }
    
    private boolean isAllDigit(String value)
    {
        for(int i = 0; i < value.length(); i++)
            if(!Character.isDigit(value.charAt(i)))
                return false;
        
        return true;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        showcaseLabel = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        productUnits = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        productDescription = new javax.swing.JTextArea();
        btnAdd = new javax.swing.JButton();

        setBackground(new java.awt.Color(153, 153, 153));

        lblTitle.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("jLabel1");

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel1.setText("Units");

        productDescription.setEditable(false);
        productDescription.setColumns(15);
        productDescription.setRows(4);
        jScrollPane1.setViewportView(productDescription);

        btnAdd.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        btnAdd.setText("Add to Order");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(showcaseLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(productUnits))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(productUnits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(showcaseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAdd)
                    .addComponent(lblTitle))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if(product.getRequiresDimensions())
        {
            // We need to acquire the dimensions
            boolean valid = true;
            String errorMessage = "";
            
            // Ensure the user provides valid input!
            do
            {
                dimensions = JOptionPane.showInputDialog(null, "What are the dimensions? Valid formats are: 12 13 or 12W 13L" + errorMessage);
                
                // Cancel button shall return null
                if(dimensions == null)
                {
                    Logging.info(String.format("User has cancelled adding %s to order", product.getName()));
                    return;
                }
                
                if(dimensions.isBlank())
                {
                    errorMessage = "\n- Must enter valid dimensions";
                    valid = false;
                }
                else if(dimensions.split(" ").length < 2)
                {
                    errorMessage = "\n- Must have at least values for dimensions. i.e Width and Length";
                    valid = false;
                }                
                else
                {
                    String[] split = dimensions.split(" ");
                    
                    /*
                        If the expression ends with the following it's valid:
                            W:  Width
                            L:  Length
                    
                        Otherwise, the text can only contain numeric values
                    */
                    for(String part : split)
                    {                        
                        if(part.toLowerCase().endsWith("w") || part.toLowerCase().endsWith("l"))
                        {
                            valid = true;
                            continue;
                        }
                        
                        if(!isAllDigit(part))
                        {
                            valid = false;
                            break;
                        }
                    }
                }
                
            } while(!valid);
        }
        
        // Reset to default value
        productUnits.setValue(1);
                
        consumer.addToOrder(getProduct());
    }//GEN-LAST:event_btnAddActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextArea productDescription;
    private javax.swing.JSpinner productUnits;
    private javax.swing.JLabel showcaseLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public ProductSelection getProduct() 
    {
        return new ProductSelection(product, Double.parseDouble(this.productUnits.getModel().getValue().toString()), dimensions);
    }

}
